(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{308:function(t,e,n){"use strict";n.r(e);var a=n(14),i=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"扁平化数组转化成tree"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扁平化数组转化成tree"}},[t._v("#")]),t._v(" 扁平化数组转化成tree")]),t._v(" "),e("p",[t._v("如题：将下列数组转化成层级tree结构")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  let arr = [\n    {id: 1, name: '部门1', pid: 0},\n    {id: 2, name: '部门2', pid: 1},\n    {id: 3, name: '部门3', pid: 1},\n    {id: 4, name: '部门4', pid: 3},\n    {id: 5, name: '部门5', pid: 4}\n  ]\n")])])]),e("h3",{attrs:{id:"方法1-不考虑性能-直接递归"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法1-不考虑性能-直接递归"}},[t._v("#")]),t._v(" 方法1，不考虑性能，直接递归")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  const getChildren = (data, result, pid) => {\n    for (const item of data) (\n      if (item.pid === pid) {\n        const newItem = {\n          ...item,\n          children: []\n        }\n        result.push(newItem)\n        getChildren(data, newItem.children, item.id)\n      }\n    )\n  }\n\n  const arrayToTree = (data, pid) => {\n    const result = []\n    getChildren(data, result, pid)\n    return result\n  }\n")])])]),e("h3",{attrs:{id:"方法2-优化性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法2-优化性能"}},[t._v("#")]),t._v(" 方法2，优化性能")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  function arrayToTree(items) {\n    const result = [];   // 存放结果集\n    const itemMap = {};  // \n    for (const item of items) {\n      const id = item.id;\n      const pid = item.pid;\n\n      if (!itemMap[id]) {\n        itemMap[id] = {\n          children: [],\n        }\n      }\n\n      itemMap[id] = {\n        ...item,\n        children: itemMap[id]['children']\n      }\n\n      const treeItem =  itemMap[id];\n\n      if (pid === 0) {\n        result.push(treeItem);\n      } else {\n        if (!itemMap[pid]) {\n          itemMap[pid] = {\n            children: [],\n          }\n        }\n        itemMap[pid].children.push(treeItem)\n      }\n\n    }\n    return result;\n  }\n")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);