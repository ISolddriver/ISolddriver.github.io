(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{342:function(t,v,_){"use strict";_.r(v);var r=_(14),a=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"浏览器缓存机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制"}},[t._v("#")]),t._v(" 浏览器缓存机制")]),t._v(" "),v("h3",{attrs:{id:"什么是强缓存-什么是协商缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是强缓存-什么是协商缓存"}},[t._v("#")]),t._v(" 什么是强缓存？什么是协商缓存？")]),t._v(" "),v("p",[v("strong",[t._v("强缓存")]),t._v("：浏览器直接从本地缓存中获取数据，不与服务器进行交互。")]),t._v(" "),v("p",[v("strong",[t._v("协商缓存")]),t._v("：浏览器向服务器发送请求，服务器根据请求的资源和标识，判断是否命中缓存，如果命中则返回304状态码，浏览器从缓存中获取数据；否则返回200状态码，并返回最新的资源。")]),t._v(" "),v("h3",{attrs:{id:"强缓存和协商缓存的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强缓存和协商缓存的区别"}},[t._v("#")]),t._v(" 强缓存和协商缓存的区别？")]),t._v(" "),v("p",[v("strong",[t._v("强缓存")]),t._v("：浏览器直接从本地缓存中获取数据，不与服务器进行交互。强缓存可以通过设置"),v("code",[t._v("Expires")]),t._v("或"),v("code",[t._v("Cache-Control")]),t._v("响应头来实现。")]),t._v(" "),v("p",[v("strong",[t._v("协商缓存")]),t._v("：浏览器向服务器发送请求，服务器根据请求的资源和标识，判断是否命中缓存，如果命中则返回304状态码，浏览器从缓存中获取数据；否则返回200状态码，并返回最新的资源。协商缓存可以通过设置"),v("code",[t._v("Last-Modified")]),t._v("或"),v("code",[t._v("ETag")]),t._v("响应头来实现。")]),t._v(" "),v("h3",{attrs:{id:"强缓存和协商缓存的优先级"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强缓存和协商缓存的优先级"}},[t._v("#")]),t._v(" 强缓存和协商缓存的优先级？")]),t._v(" "),v("p",[v("strong",[t._v("强缓存")]),t._v("的优先级高于"),v("strong",[t._v("协商缓存")]),t._v("。当浏览器接收到响应后，会先判断是否命中强缓存，如果命中则直接从缓存中获取数据，不与服务器进行交互。如果没有命中强缓存，则再判断是否命中协商缓存，如果命中则返回304状态码，浏览器从缓存中获取数据；否则返回200状态码，并返回最新的资源。")]),t._v(" "),v("h3",{attrs:{id:"强缓存和协商缓存的实现方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强缓存和协商缓存的实现方式"}},[t._v("#")]),t._v(" 强缓存和协商缓存的实现方式？")]),t._v(" "),v("p",[v("strong",[t._v("强缓存")]),t._v("的实现方式：通过设置"),v("code",[t._v("Expires")]),t._v("或"),v("code",[t._v("Cache-Control")]),t._v("响应头来实现。\n"),v("strong",[t._v("协商缓存")]),t._v("的实现方式：通过设置"),v("code",[t._v("Last-Modified")]),t._v("或"),v("code",[t._v("ETag")]),t._v("响应头来实现。\n如何设置响应头的"),v("code",[t._v("Expires")]),t._v("或"),v("code",[t._v("Cache-Control")]),t._v("，以及如何设置响应头的"),v("code",[t._v("Last-Modified")]),t._v("或"),v("code",[t._v("ETag")]),t._v("，可以"),v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Headers",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考MDN文档"),v("OutboundLink")],1),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"强缓存和协商缓存的优点和缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强缓存和协商缓存的优点和缺点"}},[t._v("#")]),t._v(" 强缓存和协商缓存的优点和缺点？")]),t._v(" "),v("p",[v("strong",[t._v("强缓存")]),t._v("的优点：可以减少服务器的请求次数，提高页面的加载速度。缺点：如果资源更新了，浏览器不会立即获取最新的资源，需要等待缓存过期。\n"),v("strong",[t._v("协商缓存")]),t._v("的优点：可以确保浏览器获取到最新的资源。缺点：每次请求都需要与服务器进行交互，会增加服务器的负担。")]),t._v(" "),v("h3",{attrs:{id:"强缓存和协商缓存的常见应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强缓存和协商缓存的常见应用场景"}},[t._v("#")]),t._v(" 强缓存和协商缓存的常见应用场景？")]),t._v(" "),v("p",[v("strong",[t._v("强缓存")]),t._v("的应用场景：对于一些不经常变化的资源，如图片、CSS、JavaScript等，可以使用强缓存来提高页面的加载速度。\n"),v("strong",[t._v("协商缓存")]),t._v("的应用场景：对于一些经常变化的资源，如API接口返回的数据，可以使用协商缓存来确保浏览器获取到最新的数据。")])])}),[],!1,null,null,null);v.default=a.exports}}]);